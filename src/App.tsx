import React, { useState } from 'react';
import './App.css';

function App() {
  const [inputText, setInputText] = useState('');
  const [outputText, setOutputText] = useState('');
  const [addNoBreakSpaces, setAddNoBreakSpaces] = useState(true);
  const [addNonBreakingHyphen, setAddNonBreakingHyphen] = useState(false);
  const [isCopied, setIsCopied] = useState(false);

  const exampleWithHyphen = '–ª–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ –±–∏–∑–Ω–µ—Å\u2011–∞–Ω–∞–ª–∏—Ç–∏–∫–∏';
  const exampleWithBreakSpace =
    '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏\u00A0–º—ã\u00A0–ø—Ä–æ–≤–µ–¥–µ–º –¥–ª—è –≤–∞—Å –¥–µ–º–æ';

  // –ó–∞–º–µ–Ω–∞ –æ–±—ã—á–Ω—ã—Ö –¥–µ—Ñ–∏—Å—ã –Ω–∞ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ
  const handleAddNonBreakingHyphens = (text: string) => {
    return text.replace(/-/g, '\\u2011');
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞ (–¥–ª—è –∑–∞–ø—Ä–µ—Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É)
  const handleAddNonBreakSpaces = (text: string, prepositions = []) => {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–µ–¥–ª–æ–≥–æ–≤/—Å–æ—é–∑–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    const defaultPrepositions = [
      '–≤',
      '—Å',
      '–∫',
      '—É',
      '–æ',
      '–∏',
      '–Ω–∞',
      '–∑–∞',
      '–ø–æ',
      '–∏–∑',
      '–æ—Ç',
      '–¥–æ',
      '–¥–ª—è',
      '–Ω–µ',
      '–Ω–æ',
      '–∞',
      '–∏–ª–∏',
      '—Ç–æ',
      '–∂–µ',
      '–ª–∏',
      '–±—ã',
    ];

    const allPrepositions = [...defaultPrepositions, ...prepositions];

    const regex = new RegExp(
      `(^|\\s)(${allPrepositions.join('|')})(\\s)`,
      'gi',
    );

    // –ó–∞–º–µ–Ω–∞ –ø—Ä–æ–±–µ–ª–∞ –Ω–∞ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–≥–∞
    return text.replace(regex, (_, p1, p2, __) => {
      return `${p1}${p2}\\u00a0`;
    });
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    let processedText = inputText;

    if (addNoBreakSpaces) {
      processedText = handleAddNonBreakSpaces(processedText);
    }

    if (addNonBreakingHyphen) {
      processedText = handleAddNonBreakingHyphens(processedText);
    }

    setOutputText(processedText);
  };

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(outputText);
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 3000);
    } catch (error) {
      console.error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ üíÄ: ', error);
    }
  };

  return (
    <div style={{ padding: '20px', maxWidth: '600px', margin: '0 auto' }}>
      <h1>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ üìù</h1>
      <form onSubmit={handleSubmit}>
        <div style={{ marginBottom: '10px' }}>
          <h2>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç</h2>
          <textarea
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç..."
            style={{
              width: '100%',
              height: '100px',
              padding: '8px',
              fontSize: '16px',
              boxSizing: 'border-box',
            }}
          />
        </div>
        <div style={{ marginBottom: '10px' }}>
          <label>
            <input
              type="checkbox"
              checked={addNoBreakSpaces}
              onChange={(e) => setAddNoBreakSpaces(e.target.checked)}
              style={{ marginRight: '8px', cursor: 'pointer' }}
            />
            –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã{' '}
            <code
              style={{
                opacity: 0.6,
                background: 'rgba(0, 0, 0, 0.1)',
                padding: '0 4px',
                borderRadius: '4px',
                color: '#9800f7',
              }}
            >
              <small>\u00A0</small>
            </code>
          </label>
        </div>
        <div style={{ marginBottom: '15px' }}>
          <label>
            <input
              type="checkbox"
              checked={addNonBreakingHyphen}
              onChange={(e) => setAddNonBreakingHyphen(e.target.checked)}
              style={{ marginRight: '8px', cursor: 'pointer' }}
            />
            –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –¥–µ—Ñ–∏—Å{' '}
            <code
              style={{
                opacity: 0.6,
                background: 'rgba(0, 0, 0, 0.1)',
                padding: '0 4px',
                borderRadius: '4px',
                color: '#9800f7',
              }}
            >
              <small>\u2011</small>
            </code>
          </label>
        </div>

        <button
          type="submit"
          style={{
            padding: '8px 16px',
            backgroundColor: '#9800f7',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
          }}
        >
          –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å
        </button>
      </form>

      <div style={{ marginTop: '20px' }}>
        <h2>‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç ‚ú®</h2>
        <textarea
          value={outputText}
          readOnly
          placeholder="–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–∞—à —Ç–µ–∫—Å—Ç..."
          style={{
            width: '100%',
            height: '100px',
            padding: '8px',
            fontSize: '16px',
            boxSizing: 'border-box',
          }}
        />
        <button
          onClick={handleCopy}
          style={{
            color: '#9800f7',
            background: 'none',
            border: 0,
            cursor: 'pointer',
            padding: 0,
          }}
        >
          {isCopied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ‚úÖ' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}
        </button>
      </div>
    </div>
  );
}

export default App;
